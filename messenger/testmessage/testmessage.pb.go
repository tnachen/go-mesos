// Code generated by protoc-gen-gogo.
// source: testmessage.proto
// DO NOT EDIT!

/*
	Package testmessage is a generated protocol buffer package.

	It is generated from these files:
		testmessage.proto

	It has these top-level messages:
		GoGoProtobufTestMessage1
		GoGoProtobufTestMessage2
		GoGoProtobufTestMessage3
		GoGoProtobufTestMessage4
		GoGoProtobufTestMessage5
*/
package testmessage

import proto "code.google.com/p/gogoprotobuf/proto"
import json "encoding/json"
import math "math"

// discarding unused import gogoproto "code.google.com/p/gogoprotobuf/gogoproto/gogo.pb"

import io "io"
import math1 "math"
import code_google_com_p_gogoprotobuf_proto "code.google.com/p/gogoprotobuf/proto"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import math2 "math"

import fmt1 "fmt"
import strings1 "strings"
import code_google_com_p_gogoprotobuf_proto1 "code.google.com/p/gogoprotobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect1 "reflect"

import fmt2 "fmt"
import bytes "bytes"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type GoGoProtobufTestMessage1 struct {
	F0               *int32   `protobuf:"varint,1,req" json:"F0,omitempty"`
	F1               *string  `protobuf:"bytes,2,req" json:"F1,omitempty"`
	F2               *float32 `protobuf:"fixed32,3,req" json:"F2,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *GoGoProtobufTestMessage1) Reset()      { *m = GoGoProtobufTestMessage1{} }
func (*GoGoProtobufTestMessage1) ProtoMessage() {}

func (m *GoGoProtobufTestMessage1) GetF0() int32 {
	if m != nil && m.F0 != nil {
		return *m.F0
	}
	return 0
}

func (m *GoGoProtobufTestMessage1) GetF1() string {
	if m != nil && m.F1 != nil {
		return *m.F1
	}
	return ""
}

func (m *GoGoProtobufTestMessage1) GetF2() float32 {
	if m != nil && m.F2 != nil {
		return *m.F2
	}
	return 0
}

type GoGoProtobufTestMessage2 struct {
	F0               *int32   `protobuf:"varint,1,req" json:"F0,omitempty"`
	F1               *string  `protobuf:"bytes,2,req" json:"F1,omitempty"`
	F2               *float32 `protobuf:"fixed32,3,req" json:"F2,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *GoGoProtobufTestMessage2) Reset()      { *m = GoGoProtobufTestMessage2{} }
func (*GoGoProtobufTestMessage2) ProtoMessage() {}

func (m *GoGoProtobufTestMessage2) GetF0() int32 {
	if m != nil && m.F0 != nil {
		return *m.F0
	}
	return 0
}

func (m *GoGoProtobufTestMessage2) GetF1() string {
	if m != nil && m.F1 != nil {
		return *m.F1
	}
	return ""
}

func (m *GoGoProtobufTestMessage2) GetF2() float32 {
	if m != nil && m.F2 != nil {
		return *m.F2
	}
	return 0
}

type GoGoProtobufTestMessage3 struct {
	F0               *int32  `protobuf:"varint,1,req" json:"F0,omitempty"`
	F1               *string `protobuf:"bytes,2,req" json:"F1,omitempty"`
	F2               *string `protobuf:"bytes,3,req" json:"F2,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GoGoProtobufTestMessage3) Reset()      { *m = GoGoProtobufTestMessage3{} }
func (*GoGoProtobufTestMessage3) ProtoMessage() {}

func (m *GoGoProtobufTestMessage3) GetF0() int32 {
	if m != nil && m.F0 != nil {
		return *m.F0
	}
	return 0
}

func (m *GoGoProtobufTestMessage3) GetF1() string {
	if m != nil && m.F1 != nil {
		return *m.F1
	}
	return ""
}

func (m *GoGoProtobufTestMessage3) GetF2() string {
	if m != nil && m.F2 != nil {
		return *m.F2
	}
	return ""
}

type GoGoProtobufTestMessage4 struct {
	F0               *int32  `protobuf:"varint,1,req" json:"F0,omitempty"`
	F1               *string `protobuf:"bytes,2,req" json:"F1,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GoGoProtobufTestMessage4) Reset()      { *m = GoGoProtobufTestMessage4{} }
func (*GoGoProtobufTestMessage4) ProtoMessage() {}

func (m *GoGoProtobufTestMessage4) GetF0() int32 {
	if m != nil && m.F0 != nil {
		return *m.F0
	}
	return 0
}

func (m *GoGoProtobufTestMessage4) GetF1() string {
	if m != nil && m.F1 != nil {
		return *m.F1
	}
	return ""
}

type GoGoProtobufTestMessage5 struct {
	F0               *int32  `protobuf:"varint,1,req" json:"F0,omitempty"`
	F1               *string `protobuf:"bytes,2,req" json:"F1,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GoGoProtobufTestMessage5) Reset()      { *m = GoGoProtobufTestMessage5{} }
func (*GoGoProtobufTestMessage5) ProtoMessage() {}

func (m *GoGoProtobufTestMessage5) GetF0() int32 {
	if m != nil && m.F0 != nil {
		return *m.F0
	}
	return 0
}

func (m *GoGoProtobufTestMessage5) GetF1() string {
	if m != nil && m.F1 != nil {
		return *m.F1
	}
	return ""
}

func init() {
}
func (m *GoGoProtobufTestMessage1) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.F0 = &v
		case 2:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.F1 = &s
			index = postIndex
		case 3:
			if wireType != 5 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var v uint32
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint32(data[i-4])
			v |= uint32(data[i-3]) << 8
			v |= uint32(data[i-2]) << 16
			v |= uint32(data[i-1]) << 24
			v2 := math1.Float32frombits(v)
			m.F2 = &v2
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := code_google_com_p_gogoprotobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *GoGoProtobufTestMessage2) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.F0 = &v
		case 2:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.F1 = &s
			index = postIndex
		case 3:
			if wireType != 5 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var v uint32
			i := index + 4
			if i > l {
				return io.ErrUnexpectedEOF
			}
			index = i
			v = uint32(data[i-4])
			v |= uint32(data[i-3]) << 8
			v |= uint32(data[i-2]) << 16
			v |= uint32(data[i-1]) << 24
			v2 := math1.Float32frombits(v)
			m.F2 = &v2
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := code_google_com_p_gogoprotobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *GoGoProtobufTestMessage3) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.F0 = &v
		case 2:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.F1 = &s
			index = postIndex
		case 3:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.F2 = &s
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := code_google_com_p_gogoprotobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *GoGoProtobufTestMessage4) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.F0 = &v
		case 2:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.F1 = &s
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := code_google_com_p_gogoprotobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *GoGoProtobufTestMessage5) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.F0 = &v
		case 2:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.F1 = &s
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := code_google_com_p_gogoprotobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (this *GoGoProtobufTestMessage1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoGoProtobufTestMessage1{`,
		`F0:` + valueToStringTestmessage(this.F0) + `,`,
		`F1:` + valueToStringTestmessage(this.F1) + `,`,
		`F2:` + valueToStringTestmessage(this.F2) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GoGoProtobufTestMessage2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoGoProtobufTestMessage2{`,
		`F0:` + valueToStringTestmessage(this.F0) + `,`,
		`F1:` + valueToStringTestmessage(this.F1) + `,`,
		`F2:` + valueToStringTestmessage(this.F2) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GoGoProtobufTestMessage3) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoGoProtobufTestMessage3{`,
		`F0:` + valueToStringTestmessage(this.F0) + `,`,
		`F1:` + valueToStringTestmessage(this.F1) + `,`,
		`F2:` + valueToStringTestmessage(this.F2) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GoGoProtobufTestMessage4) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoGoProtobufTestMessage4{`,
		`F0:` + valueToStringTestmessage(this.F0) + `,`,
		`F1:` + valueToStringTestmessage(this.F1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GoGoProtobufTestMessage5) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoGoProtobufTestMessage5{`,
		`F0:` + valueToStringTestmessage(this.F0) + `,`,
		`F1:` + valueToStringTestmessage(this.F1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTestmessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GoGoProtobufTestMessage1) Size() (n int) {
	var l int
	_ = l
	if m.F0 != nil {
		n += 1 + sovTestmessage(uint64(uint32(*m.F0)))
	}
	if m.F1 != nil {
		l = len(*m.F1)
		n += 1 + l + sovTestmessage(uint64(l))
	}
	if m.F2 != nil {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}
func (m *GoGoProtobufTestMessage2) Size() (n int) {
	var l int
	_ = l
	if m.F0 != nil {
		n += 1 + sovTestmessage(uint64(uint32(*m.F0)))
	}
	if m.F1 != nil {
		l = len(*m.F1)
		n += 1 + l + sovTestmessage(uint64(l))
	}
	if m.F2 != nil {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}
func (m *GoGoProtobufTestMessage3) Size() (n int) {
	var l int
	_ = l
	if m.F0 != nil {
		n += 1 + sovTestmessage(uint64(uint32(*m.F0)))
	}
	if m.F1 != nil {
		l = len(*m.F1)
		n += 1 + l + sovTestmessage(uint64(l))
	}
	if m.F2 != nil {
		l = len(*m.F2)
		n += 1 + l + sovTestmessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}
func (m *GoGoProtobufTestMessage4) Size() (n int) {
	var l int
	_ = l
	if m.F0 != nil {
		n += 1 + sovTestmessage(uint64(uint32(*m.F0)))
	}
	if m.F1 != nil {
		l = len(*m.F1)
		n += 1 + l + sovTestmessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}
func (m *GoGoProtobufTestMessage5) Size() (n int) {
	var l int
	_ = l
	if m.F0 != nil {
		n += 1 + sovTestmessage(uint64(uint32(*m.F0)))
	}
	if m.F1 != nil {
		l = len(*m.F1)
		n += 1 + l + sovTestmessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTestmessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTestmessage(x uint64) (n int) {
	return sovTestmessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func NewPopulatedGoGoProtobufTestMessage1(r randyTestmessage, easy bool) *GoGoProtobufTestMessage1 {
	this := &GoGoProtobufTestMessage1{}
	v1 := r.Int31()
	if r.Intn(2) == 0 {
		v1 *= -1
	}
	this.F0 = &v1
	v2 := randStringTestmessage(r)
	this.F1 = &v2
	v3 := r.Float32()
	if r.Intn(2) == 0 {
		v3 *= -1
	}
	this.F2 = &v3
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTestmessage(r, 4)
	}
	return this
}

func NewPopulatedGoGoProtobufTestMessage2(r randyTestmessage, easy bool) *GoGoProtobufTestMessage2 {
	this := &GoGoProtobufTestMessage2{}
	v4 := r.Int31()
	if r.Intn(2) == 0 {
		v4 *= -1
	}
	this.F0 = &v4
	v5 := randStringTestmessage(r)
	this.F1 = &v5
	v6 := r.Float32()
	if r.Intn(2) == 0 {
		v6 *= -1
	}
	this.F2 = &v6
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTestmessage(r, 4)
	}
	return this
}

func NewPopulatedGoGoProtobufTestMessage3(r randyTestmessage, easy bool) *GoGoProtobufTestMessage3 {
	this := &GoGoProtobufTestMessage3{}
	v7 := r.Int31()
	if r.Intn(2) == 0 {
		v7 *= -1
	}
	this.F0 = &v7
	v8 := randStringTestmessage(r)
	this.F1 = &v8
	v9 := randStringTestmessage(r)
	this.F2 = &v9
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTestmessage(r, 4)
	}
	return this
}

func NewPopulatedGoGoProtobufTestMessage4(r randyTestmessage, easy bool) *GoGoProtobufTestMessage4 {
	this := &GoGoProtobufTestMessage4{}
	v10 := r.Int31()
	if r.Intn(2) == 0 {
		v10 *= -1
	}
	this.F0 = &v10
	v11 := randStringTestmessage(r)
	this.F1 = &v11
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTestmessage(r, 3)
	}
	return this
}

func NewPopulatedGoGoProtobufTestMessage5(r randyTestmessage, easy bool) *GoGoProtobufTestMessage5 {
	this := &GoGoProtobufTestMessage5{}
	v12 := r.Int31()
	if r.Intn(2) == 0 {
		v12 *= -1
	}
	this.F0 = &v12
	v13 := randStringTestmessage(r)
	this.F1 = &v13
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTestmessage(r, 3)
	}
	return this
}

type randyTestmessage interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTestmessage(r randyTestmessage) rune {
	res := rune(r.Uint32() % 1112064)
	if 55296 <= res {
		res += 2047
	}
	return res
}
func randStringTestmessage(r randyTestmessage) string {
	v14 := r.Intn(100)
	tmps := make([]rune, v14)
	for i := 0; i < v14; i++ {
		tmps[i] = randUTF8RuneTestmessage(r)
	}
	return string(tmps)
}
func randUnrecognizedTestmessage(r randyTestmessage, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldTestmessage(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldTestmessage(data []byte, r randyTestmessage, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateTestmessage(data, uint64(key))
		v15 := r.Int63()
		if r.Intn(2) == 0 {
			v15 *= -1
		}
		data = encodeVarintPopulateTestmessage(data, uint64(v15))
	case 1:
		data = encodeVarintPopulateTestmessage(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateTestmessage(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateTestmessage(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateTestmessage(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateTestmessage(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *GoGoProtobufTestMessage1) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GoGoProtobufTestMessage1) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.F0 != nil {
		data[i] = 0x8
		i++
		i = encodeVarintTestmessage(data, i, uint64(uint32(*m.F0)))
	}
	if m.F1 != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTestmessage(data, i, uint64(len(*m.F1)))
		i += copy(data[i:], *m.F1)
	}
	if m.F2 != nil {
		data[i] = 0x1d
		i++
		i = encodeFixed32Testmessage(data, i, uint32(math2.Float32bits(*m.F2)))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *GoGoProtobufTestMessage2) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GoGoProtobufTestMessage2) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.F0 != nil {
		data[i] = 0x8
		i++
		i = encodeVarintTestmessage(data, i, uint64(uint32(*m.F0)))
	}
	if m.F1 != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTestmessage(data, i, uint64(len(*m.F1)))
		i += copy(data[i:], *m.F1)
	}
	if m.F2 != nil {
		data[i] = 0x1d
		i++
		i = encodeFixed32Testmessage(data, i, uint32(math2.Float32bits(*m.F2)))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *GoGoProtobufTestMessage3) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GoGoProtobufTestMessage3) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.F0 != nil {
		data[i] = 0x8
		i++
		i = encodeVarintTestmessage(data, i, uint64(uint32(*m.F0)))
	}
	if m.F1 != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTestmessage(data, i, uint64(len(*m.F1)))
		i += copy(data[i:], *m.F1)
	}
	if m.F2 != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTestmessage(data, i, uint64(len(*m.F2)))
		i += copy(data[i:], *m.F2)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *GoGoProtobufTestMessage4) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GoGoProtobufTestMessage4) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.F0 != nil {
		data[i] = 0x8
		i++
		i = encodeVarintTestmessage(data, i, uint64(uint32(*m.F0)))
	}
	if m.F1 != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTestmessage(data, i, uint64(len(*m.F1)))
		i += copy(data[i:], *m.F1)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *GoGoProtobufTestMessage5) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GoGoProtobufTestMessage5) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.F0 != nil {
		data[i] = 0x8
		i++
		i = encodeVarintTestmessage(data, i, uint64(uint32(*m.F0)))
	}
	if m.F1 != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTestmessage(data, i, uint64(len(*m.F1)))
		i += copy(data[i:], *m.F1)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func encodeFixed64Testmessage(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Testmessage(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTestmessage(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (this *GoGoProtobufTestMessage1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&testmessage.GoGoProtobufTestMessage1{` + `F0:` + valueToGoStringTestmessage(this.F0, "int32"), `F1:` + valueToGoStringTestmessage(this.F1, "string"), `F2:` + valueToGoStringTestmessage(this.F2, "float32"), `XXX_unrecognized:` + fmt1.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *GoGoProtobufTestMessage2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&testmessage.GoGoProtobufTestMessage2{` + `F0:` + valueToGoStringTestmessage(this.F0, "int32"), `F1:` + valueToGoStringTestmessage(this.F1, "string"), `F2:` + valueToGoStringTestmessage(this.F2, "float32"), `XXX_unrecognized:` + fmt1.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *GoGoProtobufTestMessage3) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&testmessage.GoGoProtobufTestMessage3{` + `F0:` + valueToGoStringTestmessage(this.F0, "int32"), `F1:` + valueToGoStringTestmessage(this.F1, "string"), `F2:` + valueToGoStringTestmessage(this.F2, "string"), `XXX_unrecognized:` + fmt1.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *GoGoProtobufTestMessage4) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&testmessage.GoGoProtobufTestMessage4{` + `F0:` + valueToGoStringTestmessage(this.F0, "int32"), `F1:` + valueToGoStringTestmessage(this.F1, "string"), `XXX_unrecognized:` + fmt1.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *GoGoProtobufTestMessage5) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&testmessage.GoGoProtobufTestMessage5{` + `F0:` + valueToGoStringTestmessage(this.F0, "int32"), `F1:` + valueToGoStringTestmessage(this.F1, "string"), `XXX_unrecognized:` + fmt1.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func valueToGoStringTestmessage(v interface{}, typ string) string {
	rv := reflect1.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect1.Indirect(rv).Interface()
	return fmt1.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringTestmessage(e map[int32]code_google_com_p_gogoprotobuf_proto1.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings1.Join(ss, ",") + "}"
	return s
}
func (this *GoGoProtobufTestMessage1) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GoGoProtobufTestMessage1)
	if !ok {
		return fmt2.Errorf("that is not of type *GoGoProtobufTestMessage1")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that is type *GoGoProtobufTestMessage1 but is nil && this != nil")
	} else if this == nil {
		return fmt2.Errorf("that is type *GoGoProtobufTestMessage1but is not nil && this == nil")
	}
	if this.F0 != nil && that1.F0 != nil {
		if *this.F0 != *that1.F0 {
			return fmt2.Errorf("F0 this(%v) Not Equal that(%v)", *this.F0, *that1.F0)
		}
	} else if this.F0 != nil {
		return fmt2.Errorf("this.F0 == nil && that.F0 != nil")
	} else if that1.F0 != nil {
		return fmt2.Errorf("F0 this(%v) Not Equal that(%v)", this.F0, that1.F0)
	}
	if this.F1 != nil && that1.F1 != nil {
		if *this.F1 != *that1.F1 {
			return fmt2.Errorf("F1 this(%v) Not Equal that(%v)", *this.F1, *that1.F1)
		}
	} else if this.F1 != nil {
		return fmt2.Errorf("this.F1 == nil && that.F1 != nil")
	} else if that1.F1 != nil {
		return fmt2.Errorf("F1 this(%v) Not Equal that(%v)", this.F1, that1.F1)
	}
	if this.F2 != nil && that1.F2 != nil {
		if *this.F2 != *that1.F2 {
			return fmt2.Errorf("F2 this(%v) Not Equal that(%v)", *this.F2, *that1.F2)
		}
	} else if this.F2 != nil {
		return fmt2.Errorf("this.F2 == nil && that.F2 != nil")
	} else if that1.F2 != nil {
		return fmt2.Errorf("F2 this(%v) Not Equal that(%v)", this.F2, that1.F2)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt2.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GoGoProtobufTestMessage1) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GoGoProtobufTestMessage1)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.F0 != nil && that1.F0 != nil {
		if *this.F0 != *that1.F0 {
			return false
		}
	} else if this.F0 != nil {
		return false
	} else if that1.F0 != nil {
		return false
	}
	if this.F1 != nil && that1.F1 != nil {
		if *this.F1 != *that1.F1 {
			return false
		}
	} else if this.F1 != nil {
		return false
	} else if that1.F1 != nil {
		return false
	}
	if this.F2 != nil && that1.F2 != nil {
		if *this.F2 != *that1.F2 {
			return false
		}
	} else if this.F2 != nil {
		return false
	} else if that1.F2 != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GoGoProtobufTestMessage2) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GoGoProtobufTestMessage2)
	if !ok {
		return fmt2.Errorf("that is not of type *GoGoProtobufTestMessage2")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that is type *GoGoProtobufTestMessage2 but is nil && this != nil")
	} else if this == nil {
		return fmt2.Errorf("that is type *GoGoProtobufTestMessage2but is not nil && this == nil")
	}
	if this.F0 != nil && that1.F0 != nil {
		if *this.F0 != *that1.F0 {
			return fmt2.Errorf("F0 this(%v) Not Equal that(%v)", *this.F0, *that1.F0)
		}
	} else if this.F0 != nil {
		return fmt2.Errorf("this.F0 == nil && that.F0 != nil")
	} else if that1.F0 != nil {
		return fmt2.Errorf("F0 this(%v) Not Equal that(%v)", this.F0, that1.F0)
	}
	if this.F1 != nil && that1.F1 != nil {
		if *this.F1 != *that1.F1 {
			return fmt2.Errorf("F1 this(%v) Not Equal that(%v)", *this.F1, *that1.F1)
		}
	} else if this.F1 != nil {
		return fmt2.Errorf("this.F1 == nil && that.F1 != nil")
	} else if that1.F1 != nil {
		return fmt2.Errorf("F1 this(%v) Not Equal that(%v)", this.F1, that1.F1)
	}
	if this.F2 != nil && that1.F2 != nil {
		if *this.F2 != *that1.F2 {
			return fmt2.Errorf("F2 this(%v) Not Equal that(%v)", *this.F2, *that1.F2)
		}
	} else if this.F2 != nil {
		return fmt2.Errorf("this.F2 == nil && that.F2 != nil")
	} else if that1.F2 != nil {
		return fmt2.Errorf("F2 this(%v) Not Equal that(%v)", this.F2, that1.F2)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt2.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GoGoProtobufTestMessage2) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GoGoProtobufTestMessage2)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.F0 != nil && that1.F0 != nil {
		if *this.F0 != *that1.F0 {
			return false
		}
	} else if this.F0 != nil {
		return false
	} else if that1.F0 != nil {
		return false
	}
	if this.F1 != nil && that1.F1 != nil {
		if *this.F1 != *that1.F1 {
			return false
		}
	} else if this.F1 != nil {
		return false
	} else if that1.F1 != nil {
		return false
	}
	if this.F2 != nil && that1.F2 != nil {
		if *this.F2 != *that1.F2 {
			return false
		}
	} else if this.F2 != nil {
		return false
	} else if that1.F2 != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GoGoProtobufTestMessage3) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GoGoProtobufTestMessage3)
	if !ok {
		return fmt2.Errorf("that is not of type *GoGoProtobufTestMessage3")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that is type *GoGoProtobufTestMessage3 but is nil && this != nil")
	} else if this == nil {
		return fmt2.Errorf("that is type *GoGoProtobufTestMessage3but is not nil && this == nil")
	}
	if this.F0 != nil && that1.F0 != nil {
		if *this.F0 != *that1.F0 {
			return fmt2.Errorf("F0 this(%v) Not Equal that(%v)", *this.F0, *that1.F0)
		}
	} else if this.F0 != nil {
		return fmt2.Errorf("this.F0 == nil && that.F0 != nil")
	} else if that1.F0 != nil {
		return fmt2.Errorf("F0 this(%v) Not Equal that(%v)", this.F0, that1.F0)
	}
	if this.F1 != nil && that1.F1 != nil {
		if *this.F1 != *that1.F1 {
			return fmt2.Errorf("F1 this(%v) Not Equal that(%v)", *this.F1, *that1.F1)
		}
	} else if this.F1 != nil {
		return fmt2.Errorf("this.F1 == nil && that.F1 != nil")
	} else if that1.F1 != nil {
		return fmt2.Errorf("F1 this(%v) Not Equal that(%v)", this.F1, that1.F1)
	}
	if this.F2 != nil && that1.F2 != nil {
		if *this.F2 != *that1.F2 {
			return fmt2.Errorf("F2 this(%v) Not Equal that(%v)", *this.F2, *that1.F2)
		}
	} else if this.F2 != nil {
		return fmt2.Errorf("this.F2 == nil && that.F2 != nil")
	} else if that1.F2 != nil {
		return fmt2.Errorf("F2 this(%v) Not Equal that(%v)", this.F2, that1.F2)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt2.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GoGoProtobufTestMessage3) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GoGoProtobufTestMessage3)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.F0 != nil && that1.F0 != nil {
		if *this.F0 != *that1.F0 {
			return false
		}
	} else if this.F0 != nil {
		return false
	} else if that1.F0 != nil {
		return false
	}
	if this.F1 != nil && that1.F1 != nil {
		if *this.F1 != *that1.F1 {
			return false
		}
	} else if this.F1 != nil {
		return false
	} else if that1.F1 != nil {
		return false
	}
	if this.F2 != nil && that1.F2 != nil {
		if *this.F2 != *that1.F2 {
			return false
		}
	} else if this.F2 != nil {
		return false
	} else if that1.F2 != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GoGoProtobufTestMessage4) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GoGoProtobufTestMessage4)
	if !ok {
		return fmt2.Errorf("that is not of type *GoGoProtobufTestMessage4")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that is type *GoGoProtobufTestMessage4 but is nil && this != nil")
	} else if this == nil {
		return fmt2.Errorf("that is type *GoGoProtobufTestMessage4but is not nil && this == nil")
	}
	if this.F0 != nil && that1.F0 != nil {
		if *this.F0 != *that1.F0 {
			return fmt2.Errorf("F0 this(%v) Not Equal that(%v)", *this.F0, *that1.F0)
		}
	} else if this.F0 != nil {
		return fmt2.Errorf("this.F0 == nil && that.F0 != nil")
	} else if that1.F0 != nil {
		return fmt2.Errorf("F0 this(%v) Not Equal that(%v)", this.F0, that1.F0)
	}
	if this.F1 != nil && that1.F1 != nil {
		if *this.F1 != *that1.F1 {
			return fmt2.Errorf("F1 this(%v) Not Equal that(%v)", *this.F1, *that1.F1)
		}
	} else if this.F1 != nil {
		return fmt2.Errorf("this.F1 == nil && that.F1 != nil")
	} else if that1.F1 != nil {
		return fmt2.Errorf("F1 this(%v) Not Equal that(%v)", this.F1, that1.F1)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt2.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GoGoProtobufTestMessage4) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GoGoProtobufTestMessage4)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.F0 != nil && that1.F0 != nil {
		if *this.F0 != *that1.F0 {
			return false
		}
	} else if this.F0 != nil {
		return false
	} else if that1.F0 != nil {
		return false
	}
	if this.F1 != nil && that1.F1 != nil {
		if *this.F1 != *that1.F1 {
			return false
		}
	} else if this.F1 != nil {
		return false
	} else if that1.F1 != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GoGoProtobufTestMessage5) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GoGoProtobufTestMessage5)
	if !ok {
		return fmt2.Errorf("that is not of type *GoGoProtobufTestMessage5")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that is type *GoGoProtobufTestMessage5 but is nil && this != nil")
	} else if this == nil {
		return fmt2.Errorf("that is type *GoGoProtobufTestMessage5but is not nil && this == nil")
	}
	if this.F0 != nil && that1.F0 != nil {
		if *this.F0 != *that1.F0 {
			return fmt2.Errorf("F0 this(%v) Not Equal that(%v)", *this.F0, *that1.F0)
		}
	} else if this.F0 != nil {
		return fmt2.Errorf("this.F0 == nil && that.F0 != nil")
	} else if that1.F0 != nil {
		return fmt2.Errorf("F0 this(%v) Not Equal that(%v)", this.F0, that1.F0)
	}
	if this.F1 != nil && that1.F1 != nil {
		if *this.F1 != *that1.F1 {
			return fmt2.Errorf("F1 this(%v) Not Equal that(%v)", *this.F1, *that1.F1)
		}
	} else if this.F1 != nil {
		return fmt2.Errorf("this.F1 == nil && that.F1 != nil")
	} else if that1.F1 != nil {
		return fmt2.Errorf("F1 this(%v) Not Equal that(%v)", this.F1, that1.F1)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt2.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GoGoProtobufTestMessage5) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GoGoProtobufTestMessage5)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.F0 != nil && that1.F0 != nil {
		if *this.F0 != *that1.F0 {
			return false
		}
	} else if this.F0 != nil {
		return false
	} else if that1.F0 != nil {
		return false
	}
	if this.F1 != nil && that1.F1 != nil {
		if *this.F1 != *that1.F1 {
			return false
		}
	} else if this.F1 != nil {
		return false
	} else if that1.F1 != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
